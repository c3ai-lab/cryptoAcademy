name: Build and Push Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created
env:
  NODE_VERSION: '14.x'                # set this to the node version to use
  SSH_CONNECTION: 'root@cryptocademy.app'
  SUB_DIR: 'app'

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Migrate
        run: php artisan:migrate

      - name: Composer install
        run: composer install --no-interaction --optimize-autoloader --no-dev

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm install, build, and test
        run: |
          # Build and test the project
          npm install --production

      - name: Build the Docker image
        run: |
          docker build --no-cache . --tag mats9798/cryptocademy:latest
          docker login -u mats9798 -p ${{ secrets.DOCKER_LOGIN_PASSWORD }}
          docker push mats9798/cryptocademy:latest
      - name: .env
        run: |
          sed -ri -e "s!APP_KEY=!APP_KEY=${{ secrets.APP_KEY }}!g" docker/prod/laravel.env
          sed -ri -e "s!DB_PASSWORD=!DB_PASSWORD=${{ secrets.DB_PASSWORD }}!g" docker/prod/laravel.env
          sed -ri -e "s!MAIL_USERNAME=!MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}!g" docker/prod/laravel.env
          sed -ri -e "s!MAIL_PASSWORD=!MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}!g" docker/prod/laravel.env
      - name: Move .env, docker-compose and startup to Prod-Server
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no docker/prod/docker-compose.yml "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
          scp -o StrictHostKeyChecking=no docker/prod/*.env "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
          scp -o StrictHostKeyChecking=no docker/prod/startup "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
          ssh -o StrictHostKeyChecking=no "${{ env.SSH_CONNECTION }}" "cd ${{ env.SUB_DIR }}/ && bash startup"
          rm ~/.ssh/id_rsa



#name: Build and Push Docker Image CI
#
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
#  # Also trigger on page_build, as well as release created events
#  page_build:
#  release:
#    types: # This configuration does not affect the page_build event above
#      - created
#env:
#  NODE_VERSION: '14.x'                # set this to the node version to use
#  SSH_CONNECTION: 'root@cryptocademy.app'
#  SUB_DIR: 'app'
#
#jobs:
#  composer:
#    name: Build Composer
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - uses: actions/checkout@v2
#      - name: Cache dependencies
#        id: cache
#        uses: actions/cache@v2
#        with:
#          path: ./vendor
#          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
#      - name: Install dependencies
#        uses: php-actions/composer@v6
#        with:
#          php_version: 8.0
#          version: 2
#          dev: no
#          args: --no-interaction --optimize-autoloader
#      - run: composer install

#  npm:
#    name: Build NPM
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Use Node.js ${{ env.NODE_VERSION }}
#          uses: actions/setup-node@v2
#          with:
#            node-version: ${{ env.NODE_VERSION }}
#
#      - name: npm install, build, and test
#        run: |
#          # Build and test the project
#          npm install --production

#  envfile:
#    name: Build ENV File
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - uses: actions/checkout@v2
#      - name: Cache ENV FILE
#        id: cache
#        uses: actions/cache@v2
#        with:
#          path: docker/prod/laravel.env
#      - name: Build ENV File
#        run: |
#          sed -ri -e "s!APP_KEY=!APP_KEY=${{ secrets.APP_KEY }}!g" docker/prod/laravel.env
#          sed -ri -e "s!DB_PASSWORD=!DB_PASSWORD=${{ secrets.DB_PASSWORD }}!g" docker/prod/laravel.env
#  #          sed -ri -e "s!MWORD=!MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}!g" docker/prod/laravel.env
#  #          sed -ri -e "s!MWORD=!MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}!g" docker/prod/laravel.env
#  dockerize:
#    needs: [ composer, npm, envfile ]
#    name: Dockerize
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - uses: actions/checkout@v2
#      - name: Dockerize
#        run: |
#          docker build --no-cache . --tag mats9798/cryptocademy:latest
#          docker login -u mats9798 -p ${{ secrets.DOCKER_LOGIN_PASSWORD }}
#          docker push mats9798/cryptocademy:latest
#  deploy:
#    needs: [ dockerize ]
#    name: Deploy TO PRODUCTION-SERVER
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - name: Install SSH Key
#        uses: actions/checkout@v2
#        with:
#          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
#      - name: Deploy to Server
#        run: |
#          ssh -o StrictHostKeyChecking=no "${{ env.SSH_CONNECTION }}" "mkdir -p ${{ env.SUB_DIR }}/data/nginx"
#          scp -o StrictHostKeyChecking=no docker/prod/docker-compose.yml "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
#          scp -o StrictHostKeyChecking=no docker/prod/*.env "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
#          scp -o StrictHostKeyChecking=no docker/prod/startup "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
#          scp -o StrictHostKeyChecking=no docker/prod/init-letsencrypt.sh "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/"
#          scp -o StrictHostKeyChecking=no docker/prod/nginx/ "${{ env.SSH_CONNECTION }}:${{ env.SUB_DIR }}/data/nginx/"
#          ssh -o StrictHostKeyChecking=no "${{ env.SSH_CONNECTION }}" "cd ${{ env.SUB_DIR }}/ && bash startup"

