name: Build and Push Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created
env:
  NODE_VERSION: '14.x'                # set this to the node version to use
  SSH_CONNECTION: 'root@cryptocademy.app'
  SUB_DIR: 'app'

jobs:
  composer:
    name: Build Composer
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./vendor
          key: vendor-${{ hashFiles('composer.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: php-actions/composer@v8.0
        with:
          php_version: 8.0
          version: 2
          dev: no
          args: --no-interaction --optimize-autoloader
        run: composer install

  npm:
    name: Build NPM
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: ${{ env.NODE_VERSION }}
          run: npm install --production

  envfile:
    name: Build ENV File
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Cache ENV FILE
        id: cache
        uses: actions/cache@v2
        with:
          path: docker/prod/laravel.env
      - name: Build ENV File
        run: |
          sed -ri -e "s!APP_KEY=!APP_KEY=${{ secrets.APP_KEY }}!g" docker/prod/laravel.env
          sed -ri -e "s!DB_PASSWORD=!DB_PASSWORD=${{ secrets.DB_PASSWORD }}!g" docker/prod/laravel.env
  #          sed -ri -e "s!MWORD=!MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}!g" docker/prod/laravel.env
  #          sed -ri -e "s!MWORD=!MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}!g" docker/prod/laravel.env
  dockerize:
    needs: [ composer, npm, envfile ]
    name: Dockerize
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Build the Docker image
        run: |
          docker build --no-cache . --tag mats9798/cryptocademy:latest
          docker login -u mats9798 -p ${{ secrets.DOCKER_LOGIN_PASSWORD }}
          docker push mats9798/cryptocademy:latest
  deploy:
    needs: [ dockerize ]
    name: Dockerize
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy TO PRODUCTION-SERVER
        with:
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no "${{ env.SSH_CONNECTION }}" "mkdir -p app/data/nginx"
          scp -o StrictHostKeyChecking=no docker/prod/docker-compose.yml "${{ env.SSH_CONNECTION }}:app/"
          scp -o StrictHostKeyChecking=no docker/prod/*.env "${{ env.SSH_CONNECTION }}:app/"
          scp -o StrictHostKeyChecking=no docker/prod/startup "${{ env.SSH_CONNECTION }}:app/"
          scp -o StrictHostKeyChecking=no docker/prod/init-letsencrypt.sh "${{ env.SSH_CONNECTION }}:app/"
          scp -o StrictHostKeyChecking=no docker/prod/nginx/ "${{ env.SSH_CONNECTION }}:app/data/nginx/"
          ssh -o StrictHostKeyChecking=no "${{ env.SSH_CONNECTION }}" "cd app/ && bash startup"
